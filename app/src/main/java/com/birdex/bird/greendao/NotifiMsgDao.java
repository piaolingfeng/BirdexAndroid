package com.birdex.bird.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.birdex.bird.greendao.NotifiMsg;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NOTIFI_MSG".
*/
public class NotifiMsgDao extends AbstractDao<NotifiMsg, Long> {

    public static final String TABLENAME = "NOTIFI_MSG";

    /**
     * Properties of entity NotifiMsg.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Msgtext = new Property(2, String.class, "msgtext", false, "MSGTEXT");
        public final static Property Isread = new Property(3, Boolean.class, "isread", false, "ISREAD");
        public final static Property Msgdate = new Property(4, String.class, "msgdate", false, "MSGDATE");
        public final static Property Typeid = new Property(5, String.class, "typeid", false, "TYPEID");
    };


    public NotifiMsgDao(DaoConfig config) {
        super(config);
    }
    
    public NotifiMsgDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NOTIFI_MSG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TITLE\" TEXT NOT NULL ," + // 1: title
                "\"MSGTEXT\" TEXT," + // 2: msgtext
                "\"ISREAD\" INTEGER," + // 3: isread
                "\"MSGDATE\" TEXT," + // 4: msgdate
                "\"TYPEID\" TEXT);"); // 5: typeid
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NOTIFI_MSG\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, NotifiMsg entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getTitle());
 
        String msgtext = entity.getMsgtext();
        if (msgtext != null) {
            stmt.bindString(3, msgtext);
        }
 
        Boolean isread = entity.getIsread();
        if (isread != null) {
            stmt.bindLong(4, isread ? 1L: 0L);
        }
 
        String msgdate = entity.getMsgdate();
        if (msgdate != null) {
            stmt.bindString(5, msgdate);
        }
 
        String typeid = entity.getTypeid();
        if (typeid != null) {
            stmt.bindString(6, typeid);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public NotifiMsg readEntity(Cursor cursor, int offset) {
        NotifiMsg entity = new NotifiMsg( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // msgtext
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // isread
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // msgdate
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // typeid
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, NotifiMsg entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.getString(offset + 1));
        entity.setMsgtext(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIsread(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setMsgdate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTypeid(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(NotifiMsg entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(NotifiMsg entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
