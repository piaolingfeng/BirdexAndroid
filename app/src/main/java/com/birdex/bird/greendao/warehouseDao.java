package com.birdex.bird.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.birdex.bird.greendao.warehouse;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WAREHOUSE".
*/
public class warehouseDao extends AbstractDao<warehouse, Void> {

    public static final String TABLENAME = "WAREHOUSE";

    /**
     * Properties of entity warehouse.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Sort = new Property(0, String.class, "sort", false, "SORT");
        public final static Property IconUrl = new Property(1, String.class, "iconUrl", false, "ICON_URL");
        public final static Property Tel = new Property(2, String.class, "tel", false, "TEL");
        public final static Property PostCode = new Property(3, String.class, "postCode", false, "POST_CODE");
        public final static Property WarehouseId = new Property(4, String.class, "warehouseId", false, "WAREHOUSE_ID");
        public final static Property City = new Property(5, String.class, "city", false, "CITY");
        public final static Property Country = new Property(6, String.class, "country", false, "COUNTRY");
        public final static Property Id = new Property(7, String.class, "id", false, "ID");
        public final static Property Name = new Property(8, String.class, "name", false, "NAME");
        public final static Property AddressInfo = new Property(9, String.class, "addressInfo", false, "ADDRESS_INFO");
        public final static Property Province = new Property(10, String.class, "province", false, "PROVINCE");
        public final static Property District = new Property(11, String.class, "district", false, "DISTRICT");
        public final static Property IsShow = new Property(12, String.class, "isShow", false, "IS_SHOW");
        public final static Property MapUrl = new Property(13, String.class, "mapUrl", false, "MAP_URL");
    };


    public warehouseDao(DaoConfig config) {
        super(config);
    }
    
    public warehouseDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WAREHOUSE\" (" + //
                "\"SORT\" TEXT," + // 0: sort
                "\"ICON_URL\" TEXT," + // 1: iconUrl
                "\"TEL\" TEXT," + // 2: tel
                "\"POST_CODE\" TEXT," + // 3: postCode
                "\"WAREHOUSE_ID\" TEXT," + // 4: warehouseId
                "\"CITY\" TEXT," + // 5: city
                "\"COUNTRY\" TEXT," + // 6: country
                "\"ID\" TEXT," + // 7: id
                "\"NAME\" TEXT," + // 8: name
                "\"ADDRESS_INFO\" TEXT," + // 9: addressInfo
                "\"PROVINCE\" TEXT," + // 10: province
                "\"DISTRICT\" TEXT," + // 11: district
                "\"IS_SHOW\" TEXT," + // 12: isShow
                "\"MAP_URL\" TEXT);"); // 13: mapUrl
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WAREHOUSE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, warehouse entity) {
        stmt.clearBindings();
 
        String sort = entity.getSort();
        if (sort != null) {
            stmt.bindString(1, sort);
        }
 
        String iconUrl = entity.getIconUrl();
        if (iconUrl != null) {
            stmt.bindString(2, iconUrl);
        }
 
        String tel = entity.getTel();
        if (tel != null) {
            stmt.bindString(3, tel);
        }
 
        String postCode = entity.getPostCode();
        if (postCode != null) {
            stmt.bindString(4, postCode);
        }
 
        String warehouseId = entity.getWarehouseId();
        if (warehouseId != null) {
            stmt.bindString(5, warehouseId);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(6, city);
        }
 
        String country = entity.getCountry();
        if (country != null) {
            stmt.bindString(7, country);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(8, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(9, name);
        }
 
        String addressInfo = entity.getAddressInfo();
        if (addressInfo != null) {
            stmt.bindString(10, addressInfo);
        }
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(11, province);
        }
 
        String district = entity.getDistrict();
        if (district != null) {
            stmt.bindString(12, district);
        }
 
        String isShow = entity.getIsShow();
        if (isShow != null) {
            stmt.bindString(13, isShow);
        }
 
        String mapUrl = entity.getMapUrl();
        if (mapUrl != null) {
            stmt.bindString(14, mapUrl);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public warehouse readEntity(Cursor cursor, int offset) {
        warehouse entity = new warehouse( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // sort
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // iconUrl
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // tel
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // postCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // warehouseId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // city
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // country
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // id
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // name
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // addressInfo
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // province
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // district
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // isShow
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // mapUrl
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, warehouse entity, int offset) {
        entity.setSort(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setIconUrl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTel(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPostCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setWarehouseId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCity(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCountry(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAddressInfo(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setProvince(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setDistrict(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setIsShow(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setMapUrl(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(warehouse entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(warehouse entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
